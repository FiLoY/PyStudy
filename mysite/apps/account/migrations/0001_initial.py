# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-05-11 21:07
from __future__ import unicode_literals

import apps.account.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'blank': 'Обязательно к заполнению.', 'invalid': 'Некорректное имя пользователя.', 'null': 'Обязательно к заполнению.', 'required': 'Обязательно к заполнению.', 'unique': 'Пользователь с таким именем уже существует.'}, help_text='Имя, которое будет отображаться для всех пользователей.', max_length=60, unique=True, validators=[apps.account.models.UsernameValidator()], verbose_name='Имя пользователя')),
                ('email', models.EmailField(error_messages={'unique': 'Данная почта уже используется.'}, help_text='На почту приходит подтверждение и различная важная информация.', max_length=255, unique=True, verbose_name='Адрес электронной почты')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('first_name', models.CharField(blank=True, help_text='Можно как в паспорте.', max_length=50, validators=[apps.account.models.FIOValidator()], verbose_name='Имя')),
                ('second_name', models.CharField(blank=True, help_text='Можно как в паспорте.', max_length=50, validators=[apps.account.models.FIOValidator()], verbose_name='Отчество')),
                ('last_name', models.CharField(blank=True, help_text='Можно как в паспорте.', max_length=50, validators=[apps.account.models.FIOValidator()], verbose_name='Фамилия')),
                ('avatar', models.ImageField(default='avatars/no-avatar.svg', help_text='Графическое представление пользователя.', upload_to=apps.account.models.avatar_directory_path, verbose_name='Аватар')),
                ('date_of_birth', models.DateField(help_text='Дата рождения пользователя.', null=True, verbose_name='Дата рождения')),
                ('experience', models.IntegerField(default=0, help_text='Опыт пользователя.', verbose_name='Опыт')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', apps.account.models.UserManager()),
            ],
        ),
    ]
